import {
  BlobAccessError,
  BlobError,
  BlobUnknownError,
  createPutMethod,
  getApiUrl,
  getApiVersionHeader,
  getTokenFromOptionsOrEnv
} from "./chunk-US63CWQW.js";

// src/index.ts
import { fetch } from "undici";
var put = createPutMethod({
  allowedOptions: ["cacheControlMaxAge", "addRandomSuffix", "contentType"]
});
async function del(url, options) {
  const blobApiResponse = await fetch(getApiUrl("/delete"), {
    method: "POST",
    headers: {
      ...getApiVersionHeader(),
      authorization: `Bearer ${getTokenFromOptionsOrEnv(options)}`,
      "content-type": "application/json"
    },
    body: JSON.stringify({ urls: Array.isArray(url) ? url : [url] })
  });
  if (blobApiResponse.status !== 200) {
    if (blobApiResponse.status === 403) {
      throw new BlobAccessError();
    } else {
      throw new BlobUnknownError();
    }
  }
  await blobApiResponse.json();
}
async function head(url, options) {
  const headApiUrl = new URL(getApiUrl());
  headApiUrl.searchParams.set("url", url);
  const blobApiResponse = await fetch(headApiUrl, {
    method: "GET",
    // HEAD can't have body as a response, so we use GET
    headers: {
      ...getApiVersionHeader(),
      authorization: `Bearer ${getTokenFromOptionsOrEnv(options)}`
    }
  });
  if (blobApiResponse.status === 404) {
    return null;
  }
  if (blobApiResponse.status !== 200) {
    if (blobApiResponse.status === 403) {
      throw new BlobAccessError();
    } else {
      throw new BlobUnknownError();
    }
  }
  const headResult = await blobApiResponse.json();
  return mapBlobResult(headResult);
}
async function list(options) {
  const listApiUrl = new URL(getApiUrl());
  if (options == null ? void 0 : options.limit) {
    listApiUrl.searchParams.set("limit", options.limit.toString());
  }
  if (options == null ? void 0 : options.prefix) {
    listApiUrl.searchParams.set("prefix", options.prefix);
  }
  if (options == null ? void 0 : options.cursor) {
    listApiUrl.searchParams.set("cursor", options.cursor);
  }
  const blobApiResponse = await fetch(listApiUrl, {
    method: "GET",
    headers: {
      ...getApiVersionHeader(),
      authorization: `Bearer ${getTokenFromOptionsOrEnv(options)}`
    }
  });
  if (blobApiResponse.status !== 200) {
    if (blobApiResponse.status === 403) {
      throw new BlobAccessError();
    } else {
      throw new BlobUnknownError();
    }
  }
  const results = await blobApiResponse.json();
  return {
    ...results,
    blobs: results.blobs.map(mapBlobResult)
  };
}
function mapBlobResult(blobResult) {
  return {
    ...blobResult,
    uploadedAt: new Date(blobResult.uploadedAt)
  };
}
export {
  BlobAccessError,
  BlobError,
  BlobUnknownError,
  del,
  head,
  list,
  put
};
//# sourceMappingURL=index.js.map